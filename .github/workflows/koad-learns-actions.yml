name: "koad learn's github actions"

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - koadified
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

env:
  DEX_API: "mm2_kmd"
  DEX_RPCPORT: 7762
  DEX_RPC: "http://127.0.0.1:7762"
  DEX_PROJECT_NAME: "komodo-wallet"
  DEX_DISPLAY_NAME: "Komodo Wallet"
  DEX_COMPANY: "KomodoPlatform"
  DEX_VERSION: "0.7.2"
  DEX_WEBSITE: "https://atomicdex.io/"
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/b/vcpkg_cache
  VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
  RUNVCPKG_VCPKG_ROOT: ${{ github.workspace }}\komodo-wallet-desktop\ci_tools_atomic_dex\vcpkg-repo
  VCPKG_ROOT: ${{ github.workspace }}\komodo-wallet-desktop\ci_tools_atomic_dex\vcpkg-repo

jobs:

  ci-flow:
    name: ${{ matrix.name }}
    runs-on: self-hosted

    strategy:
      fail-fast: false
      matrix:
        name: [
            ubuntu-release,
            ubuntu-debug
        ]

        include:
          - name: ubuntu-release
            os: ubuntu-20.04
            qt: '5.15.2'
            type: 'Release'
            host: 'linux'

          - name: ubuntu-debug
            os: ubuntu-20.04
            qt: '5.15.2'
            type: 'Debug'
            host: 'linux'

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'true'

      - name: Expose GitHub Runtime Env
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install QT (Linux)
        if: runner.os == 'Linux'
        uses: jurplel/install-qt-action@v3.3.0
        with:
          version: ${{ matrix.qt }}
          host: ${{ matrix.host }}
          dir: '${{ github.workspace }}'
          target: 'desktop'
          modules: 'qtcharts debug_info qtwebengine'
          setup-python: 'false'
          cache: true

      - name: Install nim (Linux)
        if: runner.os == 'Linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export SHELL=/bin/bash
          echo "CHOOSENIM_CHOOSE_VERSION=1.6.2" >> $GITHUB_ENV
          export CHOOSENIM_CHOOSE_VERSION=1.6.2
          curl https://nim-lang.org/choosenim/init.sh > choosenim.sh
          chmod +x choosenim.sh
          ./choosenim.sh -y
          export PATH=/home/runner/.nimble/bin:$PATH
          chmod +x /home/runner/.choosenim/toolchains/nim-1.6.2/bin/*

      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          echo ${{ github.sha }}
          sudo ./ci_tools_atomic_dex/ci_scripts/linux_script.sh

      - name: Upload env variable for vpkg (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "CXX=clang++-12" >> $GITHUB_ENV
          echo "CC=clang-12" >> $GITHUB_ENV

      - name: vcpkg deps (All)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Build Komodo Wallet (Linux)
        if: runner.os == 'Linux'
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          export PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          #export CXXFLAGS=-stdlib=libc++
          #export LDFLAGS=-stdlib=libc++
          export CXX=clang++-12
          export CC=clang-12
          cd ci_tools_atomic_dex
          nimble build -y

          ./ci_tools_atomic_dex build ${{ matrix.type }}
          ./ci_tools_atomic_dex bundle ${{ matrix.type }}


      - name: Upload env variable for artifacts (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "artifact_name_zstd=${{ env.DEX_PROJECT_NAME }}-${{ matrix.name }}-$(git rev-parse --short HEAD).tar.zst" >> $GITHUB_ENV
          echo "artifact_name_zip=${{ env.DEX_PROJECT_NAME }}-${{ matrix.name }}-$(git rev-parse --short HEAD).zip" >> $GITHUB_ENV
          echo "artifact_name_appimage=${{ env.DEX_PROJECT_NAME }}-${{ matrix.name }}-$(git rev-parse --short HEAD)-x86_64.AppImage" >> $GITHUB_ENV
          echo "target_name_zstd=${{ env.DEX_PROJECT_NAME }}-linux-$(git rev-parse --short HEAD).tar.zst" >> $GITHUB_ENV
          echo "target_name_zip=${{ env.DEX_PROJECT_NAME }}-linux-$(git rev-parse --short HEAD).zip" >> $GITHUB_ENV
          echo "target_name_appimage=${{ env.DEX_PROJECT_NAME }}-linux-$(git rev-parse --short HEAD)-x86_64.AppImage" >> $GITHUB_ENV

      - name: Upload bundle artifact (Linux ZSTD)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name_zstd }}
          path: ./bundled/linux/${{ env.target_name_zstd }}
          retention-days: 7

      - name: Upload bundle artifact (Linux ZIP)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name_zip }}
          path: ./bundled/linux/${{ env.target_name_zip }}
          retention-days: 7

      - name: Upload bundle artifact (Linux AppImage)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name_appimage }}
          path: ./bundled/linux/${{ env.target_name_appimage }}
          retention-days: 7

      - name: Running Tests (Linux)
        working-directory: ci_tools_atomic_dex
        continue-on-error: true
        if: runner.os == 'Linux' && 'KomodoPlatform/komodo-wallet-desktop' == github.repository
        run: |
          export REPORT_CI_TOKEN=${{ secrets.REPORT_CI_TOKEN_SECRET }}
          export ATOMICDEX_TEST_SEED=${{ secrets.ATOMICDEX_TEST_SEED }}
          export ATOMICDEX_PASSWORD=${{ secrets.ATOMICDEX_PASSWORD }}
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          export PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXX=clang++-12
          export CC=clang-12
          #echo "Running tests"
          #./ci_tools_atomic_dex tests ${{ matrix.type }}
          #cd build-${{ matrix.type }}/bin/AntaraAtomicDexTestsAppDir/usr/bin
          #cat ${{ env.DEX_PROJECT_NAME }}-tests-result.xml
      